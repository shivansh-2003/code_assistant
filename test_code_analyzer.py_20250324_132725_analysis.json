{
  "overall_score": 70,
  "breakdown": {
    "naming": 7,
    "modularity": 13,
    "comments": 15,
    "formatting": 10,
    "reusability": 10,
    "best_practices": 15
  },
  "recommendations": [
    "Improve naming conventions by using snake_case for all variables and functions. Convert 'badClassNaming' to 'BadClassNaming' and 'GLOBAL_CONSTANT' to 'global_constant'.",
    "Enhance modularity by breaking down the 'process_data_file' function into smaller, more focused functions that handle specific tasks like reading, processing, and writing data.",
    "Increase comments and docstrings throughout the codebase, especially in functions like 'badFunc' and 'messy_function'. Clearly explain the purpose and functionality of each function.",
    "Ensure consistent code formatting by using 4 spaces for indentation and following PEP 8 guidelines. Fix inconsistent spacing, indentation, and line lengths exceeding 79 characters.",
    "Promote reusability by refactoring 'calculate_areas' function to avoid repeating code for calculating areas of different shapes. Create separate functions for each shape calculation.",
    "Adhere to Python best practices by avoiding global variables, handling exceptions properly, and utilizing list/dict comprehensions where applicable."
  ]
}